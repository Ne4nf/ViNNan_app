from sentence_transformers import CrossEncoder
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

intent_model = CrossEncoder('cross-encoder/ms-marco-MiniLM-L-6-v2')

REFERENCE_LAST_PATTERNS = [
    "B·ªánh n√†y",
    "B·ªánh v·ª´a {context}",
    "B·ªánh v·ª´a ƒë·ªÅ c·∫≠p",
    "Th√¥ng tin th√™m v·ªÅ {disease}",
    "Chi ti·∫øt v·ªÅ b·ªánh n√†y",
    "N√≥i th√™m v·ªÅ b·ªánh v·ª´a n√™u",
    "B·ªánh v·ª´a n√≥i ƒë·∫øn"
]

INTENT_PATTERNS = {
    "info_new_disease": [
        "Cho t√¥i th√¥ng tin v·ªÅ {disease}",
        "Th√¥ng tin v·ªÅ {disease}",
        "Gi·∫£i th√≠ch v·ªÅ {disease}",
        "B·ªánh {disease} l√† g√¨",
        "T√¨m hi·ªÉu v·ªÅ {disease}",
        "T√¥i mu·ªën bi·∫øt v·ªÅ {disease}",
        "T√¥i c·∫ßn th√¥ng tin v·ªÅ {disease}",
        "Th√¥ng tin b·ªánh {disease}",
    ],
    "diagnose_new": [
        "T√¥i b·ªã {symptom} t√¥i c√≥ th·ªÉ b·ªã b·ªánh g√¨",
        "T√¥i hi·ªán ƒëang c√≥ {symptom} t√¥i b·ªã g√¨",
        "C√≥ tri·ªáu ch·ª©ng {symptom} t√¥i b·ªã g√¨",
        "C·∫£m th·∫•y {symptom} t√¥i c√≥ th·ªÉ m·∫Øc b·ªánh g√¨",
        "T√¥i th·∫•y {symptom} t√¥i c√≥ b·ªã b·ªánh kh√¥ng",
        "T√¥i ƒëang {symptom} c√≥ th·ªÉ b·ªã b·ªánh g√¨",
        "T√¥i hi·ªán ƒëang c√≥ tri·ªáu ch·ª©ng {symptom} t√¥i c√≥ th·ªÉ b·ªã b·ªánh g√¨",
        "T√¥i ƒëang g·∫∑p tri·ªáu ch·ª©ng {symptom} t√¥i c√≥ th·ªÉ b·ªã b·ªánh g√¨",
        "T√¥i th∆∞·ªùng xuy√™n b·ªã {symptom} t√¥i c√≥ th·ªÉ b·ªã b·ªánh g√¨",
        "T√¥i hay b·ªã {symptom} t√¥i c√≥ th·ªÉ b·ªã b·ªánh g√¨",
        "T√¥i hay g·∫∑p tri·ªáu ch·ª©ng {symptom} t√¥i c√≥ th·ªÉ b·ªã b·ªánh g√¨",
    ],
    "diagnose_update": [
        "T√¥i c√≤n b·ªã {symptom}",
        "T√¥i c√≤n th·∫•y {symptom}",
        "T√¥i c√≤n",
        "Ngo√†i ra t√¥i c√≤n {symptom}",
        "Ngo√†i ra",
        "Ngo√†i tri√™u ch·ª©ng {symptom}",
        "Th√™m tri·ªáu ch·ª©ng {symptom}",
        "C·∫≠p nh·∫≠t tri·ªáu ch·ª©ng {symptom}",
        "T√¥i c≈©ng b·ªã {symptom}",
        "Th√™m v√†o {symptom}",
        "T√¥i c√≤n c√≥ tri·ªáu ch·ª©ng {symptom}",
        "T√¥i c√≤n c√≥ c√°c tri·ªáu ch·ª©ng nh∆∞ {symptom}",  
        "T√¥i c√≤n xu·∫•t hi·ªán {symptom}",                
        "T√¥i c√≤n g·∫∑p {symptom}",                   
        "Ngo√†i c√°c tri·ªáu ch·ª©ng tr√™n, t√¥i c√≤n {symptom}", 
    ]
}

COMMON_SYMPTOMS = ["ƒëau ƒë·∫ßu", "s·ªët", "ho", "kh√≥ th·ªü", "m·ªát", "ch√≥ng m·∫∑t", "bu·ªìn n√¥n", "ra m√°u", "ƒëau ng·ª±c", "s∆∞ng ph√π"]

def check_symptom_overlap(query_symptoms, previous_symptoms):
    if not previous_symptoms:
        return False
    query_lower = query_symptoms.lower()
    prev_lower = previous_symptoms.lower()
    for symptom in COMMON_SYMPTOMS:
        if symptom in query_lower and symptom in prev_lower:
            return True
    return False

def extract_symptoms(query):
    query_lower = query.lower()
    found_symptoms = [symptom for symptom in COMMON_SYMPTOMS if symptom in query_lower]
    return " ".join(found_symptoms) if found_symptoms else query

def check_reference_last(query):
    query_lower = query.lower()
    for pattern in REFERENCE_LAST_PATTERNS:
        if "{context}" in pattern:
            pattern = pattern.format(context="n√™u")
        pattern = pattern.replace("{disease}", "").strip()
        if pattern.lower() in query_lower:
            logger.info(f"üîç Ph√°t hi·ªán t·ª´ kh√≥a reference_last: {pattern}")
            return True
    return False

def detect_intent(query, previous_symptoms=""):
    logger.info(f"üîç ƒêang ph√¢n t√≠ch √Ω ƒë·ªãnh cho c√¢u h·ªèi: {query}")
    query_symptoms = extract_symptoms(query)

    if check_reference_last(query):
        logger.info("üîç Ph√°t hi·ªán √Ω ƒë·ªãnh reference_last")
        return {"intent": "reference_last", "context": {"ask_confirmation": True}, "reset": False}

    intent_scores = {}
    for intent, patterns in INTENT_PATTERNS.items():
        scores = []
        for pattern in patterns:
            if "{symptom}" in pattern:
                pattern = pattern.format(symptom=query_symptoms if query_symptoms else "tri·ªáu ch·ª©ng")
            score = intent_model.predict([(query, pattern)])[0]
            scores.append(score)
        intent_scores[intent] = max(scores) if scores else 0.0

    best_intent = max(intent_scores.items(), key=lambda x: x[1])[0] if intent_scores else None
    best_score = intent_scores.get(best_intent, 0.0)

    logger.info(f"üîç √ù ƒë·ªãnh ph√°t hi·ªán: {best_intent} v·ªõi ƒëi·ªÉm {best_score}")

    if best_score < 0.5:
        return {"intent": None, "context": {"reset": True}}

    context = {}
    reset = False

    if best_intent == "info_new_disease":
        reset = True
        context["reset"] = True
    elif best_intent == "diagnose_new":
        if not check_symptom_overlap(query_symptoms, previous_symptoms):
            reset = True
            context["reset"] = True
        else:
            context["symptoms"] = query_symptoms
    elif best_intent == "diagnose_update":
        context["symptoms"] = (previous_symptoms + " " + query_symptoms).strip() if previous_symptoms else query_symptoms
        reset = False
        context["reset"] = False

    return {"intent": best_intent, "context": context, "reset": reset}

def process_context(query, previous_symptoms=""):
    result = detect_intent(query, previous_symptoms)
    intent = result["intent"]
    context = result["context"]
    reset = result.get("reset", False)

    if intent == "reference_last":
        if context.get("ask_confirmation"):
            return {"query": "B·∫°n ƒëang ƒë·ªÅ c·∫≠p ƒë·∫øn b·ªánh n√†o? Vui l√≤ng cung c·∫•p t√™n b·ªánh ƒë·ªÉ t√¥i h·ªó tr·ª£ t·ªët h∆°n.", "symptoms": previous_symptoms, "reset": False, "ask_confirmation": True}
        else:
            return {"query": query, "symptoms": previous_symptoms, "reset": False, "ask_confirmation": False}
    elif intent == "info_new_disease" or (intent == "diagnose_new" and context.get("reset")):
        return {"query": query, "symptoms": "", "reset": True, "ask_confirmation": False}
    elif intent == "diagnose_update" and context.get("symptoms"):
        combined_query = context["symptoms"]
        return {"query": combined_query, "symptoms": context["symptoms"], "reset": False, "ask_confirmation": False}
    else:
        return {"query": query, "symptoms": previous_symptoms, "reset": reset, "ask_confirmation": False}